{
	"info": {
		"_postman_id": "a22c1c92-e89e-4085-b566-55824499ee56",
		"name": "pages",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29544833"
	},
	"item": [
		{
			"name": "createPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Pages\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log('json data status test =>', jsonData)\r",
							"    pm.expect(jsonData.data.createPage).to.not.be.null\r",
							"    console.log('Response from test ==>', jsonData.data.createPage);\r",
							"});\r",
							"\r",
							"pm.test(\"Create Pages - Response Body is not Empty\", function () {\r",
							"    pm.response.to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Create Pages - Page Name is Correct\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    const req = JSON.parse(pm.request.body.graphql.variables);\r",
							"\r",
							"    pm.expect(response.data.createPage.name).equals(req.data.name.trim())\r",
							"});\r",
							"\r",
							"pm.test(\"Create Pages - Page Id is defined\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    pm.expect(response.data.createPage.objectDefinition).to.not.be.null\r",
							"});\r",
							"\r",
							"pm.test(\"Create Pages - Object definition id is defined\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    pm.expect(response.data.createPage.objectDefinition).to.not.be.null\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createPage($data: CreatePageInput!) {\r\n  createPage(data:$data){\r\n    id,\r\n    name,\r\n    description,\r\n    objectDefinition\r\n    {\r\n        id\r\n    }\r\n  }\r\n}",
						"variables": "{\r\n    \"data\": {\r\n        \"name\": \"test7's page\",\r\n        \"objectDefinitionId\": 1\r\n    }\r\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3003/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "updatePage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update Pages\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log('json data status test =>', jsonData)\r",
							"    pm.expect(jsonData.data.updatePage).to.not.be.null\r",
							"    console.log('Response from test ==>', jsonData.data.updatePage);\r",
							"});\r",
							"\r",
							"pm.test(\"Update Pages - Response Body is not Empty\", function () {\r",
							"    pm.response.to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Update Pages - Page Name is Correct\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    const req = JSON.parse(pm.request.body.graphql.variables);\r",
							"\r",
							"    pm.expect(response.data.updatePage.name).equals(req.data.name.trim())\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Update Pages - Page Id is defined\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    pm.expect(response.data.updatePage.objectDefinition).to.not.be.null\r",
							"});\r",
							"\r",
							"pm.test(\"Update Pages - Object definition id is defined\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    pm.expect(response.data.updatePage.objectDefinition).to.not.be.null\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updatePage($data: UpdatePageInput!) {\r\n  updatePage(data:$data){\r\n    id,\r\n    name,\r\n    description,\r\n    objectDefinition\r\n    {\r\n        id\r\n    }\r\n  }\r\n}",
						"variables": "{\r\n    \"data\": {\r\n        \"id\": 7,\r\n        \"name\": \" test3's page new \",\r\n        \"description\": \" test3's description2 \",\r\n        \"objectDefinitionId\": 2\r\n    }\r\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3003/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "findPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Find many pages\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log('json data status test =>', jsonData)\r",
							"    pm.expect(jsonData.data.findPage).to.not.be.null\r",
							"    console.log('Response from test ==>', jsonData.data.findPage);\r",
							"});\r",
							"\r",
							"pm.test(\"Find many pages - Response Body is not Empty\", function () {\r",
							"    pm.response.to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"Find many pages - List Name is Correct\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    const IDs = response.data.findPage.map(obj => obj.id); // create a new flat array of just the IDs\r",
							"    console.log(response);\r",
							"    pm.expect(hasDuplicates(IDs)).to.equal(false);\r",
							"});\r",
							"\r",
							"function hasDuplicates(array) {\r",
							"    return (new Set(array)).size !== array.length;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query findPage($data: FindPageInput!) {\r\n  findPage(data:$data){\r\n   id,\r\n    name,\r\n    description,\r\n    objectDefinition\r\n    {\r\n        id\r\n    }\r\n  }\r\n}",
						"variables": "{\r\n    \"data\": {\r\n        \"objectDefinitionIds\": [1]\r\n        \r\n    }\r\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3003/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "findPage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Find many pages\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const jsonData = pm.response.json();\r",
							"    console.log('json data status test =>', jsonData)\r",
							"    pm.expect(jsonData.data.getPages).to.not.be.null\r",
							"    console.log('Response from test ==>', jsonData.data.getPages);\r",
							"});\r",
							"\r",
							"pm.test(\"get all pages - Response Body is not Empty\", function () {\r",
							"    pm.response.to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test(\"get all pages - List Name is Correct\", function () {\r",
							"    const response = pm.response.json(); // parse straight to the array\r",
							"    const IDs = response.data.getPages.map(obj => obj.id); // create a new flat array of just the IDs\r",
							"    console.log(response);\r",
							"    pm.expect(hasDuplicates(IDs)).to.equal(false);\r",
							"});\r",
							"\r",
							"function hasDuplicates(array) {\r",
							"    return (new Set(array)).size !== array.length;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getPages{\r\n  getPages{\r\n   id,\r\n    name,\r\n    description,\r\n    objectDefinition\r\n    {\r\n        id\r\n    }\r\n  }\r\n  }\r\n",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3003/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3003",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	]
}